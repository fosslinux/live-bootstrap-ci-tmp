# SPDX-FileCopyrightText: 2023 fosslinux <fosslinux@aussies.space>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Run under QEMU

on:
  issue_comment:
    types: [created]

jobs:
  run:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '!ci qemu')
    permissions:
      statuses: write
    runs-on: ubuntu-latest
    environment: qemu
    steps:
      - name: Get commit info
        uses: xt0rted/pull-request-comment-branch@v2
        id: commit-info
      - name: Set workflow status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ steps.commit-info.outputs.head_sha }}
          status: pending
          context: Run under QEMU
      - name: Check permissions
        id: perms
        uses: actions-cool/check-user-permission@v2
        with:
          require: "write"
      - name: Fail if no appropriate permissions
        if: steps.perms.outputs.check-result == 'false'
        run: exit 1
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
          submodules: recursive
          # There is a strange bug(?) in nongnu, when you clone a git repository
          # against a commit != HEAD with depth=1, it errors out.
          fetch-depth: 0
      - name: Query cache for sources
        id: cache
        uses: actions/cache/restore@v3
        with:
          path: |
            sysa/distfiles
            sysc/distfiles
          key: cache-${{ hashFiles('sys*/*/sources') }}
      - name: Get sources
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./download-distfiles.sh
      - name: Cache sources
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            sysa/distfiles
            sysc/distfiles
          key: cache-${{ hashFiles('sys*/*/sources') }}
      - name: Get kernel binary
        run: curl -o kernel http://0x0.st/HHhk.bin
      - name: Get pkg diff list
        uses: dawidd6/action-download-artifact@v2
        with:
          name: pkglist-diff.txt
          pr: ${{ github.event.issue.number }}
          workflow: bwrap.yml
      - name: Get packages
        uses: dawidd6/action-download-artifact@v2
        with:
          name: packages
          pr: ${{ github.event.issue.number }}
          path: repo/
          workflow: bwrap.yml
      - name: Create repo with unchanged packages
        run: cat pkglist-diff.txt | xargs -I{} rm repo/{}
      - name: Install dependencies
        run: sudo apt install pwgen
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Start up ssh-agent
        run: eval $(ssh-agent) && echo "SSH_AUTH_SOCK=${SSH_AUTH_SOCK}" >> $GITHUB_ENV && echo "SSH_AGENT_PID=${SSH_AGENT_PID}" >> $GITHUB_ENV
      - name: Add CI key to ssh-agent
        run: ssh-add <(echo ${SSH_PRIV_KEY} | base64 -d)
        env:
          SSH_PRIV_KEY: ${{ secrets.SSH_PRIV_KEY }}
      - name: Create a name for DO droplet 
        run: echo "NAME=$(pwgen -A0 8 1)" >> $GITHUB_ENV
      - name: Create DO droplet
        run: echo "IP=$(doctl compute droplet create --image ubuntu-22-04-x64 --size s-2vcpu-4gb --region nyc1 --ssh-keys 37953408 --user-data-file ci-cloud-init.yaml --wait ${NAME} | tail -n 1 | sed 's/  */ /g' | cut -d' ' -f3)" >> $GITHUB_ENV
      - name: Wait for droplet to become available
        run: while ! nc -z $IP 22; do sleep 1; done && sleep 5 # Extra wait for cloud-init to create user
      - name: Trust SSH host key of droplet
        run: mkdir ~/.ssh && chmod 700 ~/.ssh && ssh-keyscan $IP >> ~/.ssh/known_hosts
      - name: Wait until cloud-init finishes
        run: ssh build@$IP cloud-init status --wait
      - name: Add some swap to the droplet
        run: ssh build@$IP 'sudo bash -c "dd if=/dev/zero of=/swap bs=4M count=256; chmod 600 /swap; mkswap /swap; swapon /swap"'
      - name: Copy checkout to droplet
        run: rsync -ar . build@$IP:~
      - name: Run bootstrap
        id: bootstrap
        run: ssh -o TCPKeepAlive=yes -o ServerAliveInterval=30 build@$IP ./ci-qemu.expect
      - name: Mount artifact image in droplet
        if: steps.bootstrap.conclusion == 'success'
        run: ssh build@$IP 'bash -c "sudo mount $(sudo losetup | grep sysc.img | cut -d" " -f1)p1 /mnt"'
      - name: Get artifacts from droplet
        if: steps.bootstrap.conclusion == 'success'
        run: rsync -ar build@$IP:/mnt/usr/src/repo ./repo
      - name: Delete droplet
        if: always()
        run: doctl compute droplet delete --force ${NAME}
      - name: Archive created packages
        if: steps.bootstrap.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./repo/**
      - name: Set workflow status
        if: always()
        uses: myrotvorets/set-commit-status-action@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ steps.commit-info.outputs.head_sha }}
          status: ${{ job.status}}
          context: Run under QEMU
